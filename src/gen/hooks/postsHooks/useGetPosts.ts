/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/lib/client'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/lib/client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { GetPostsQueryResponse, GetPostsQueryParams } from '../../types/GetPosts.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getPostsQueryKey = (params: GetPostsQueryParams) => [{ url: '/post' }, ...(params ? [params] : [])] as const

export type GetPostsQueryKey = ReturnType<typeof getPostsQueryKey>

/**
 * @summary Get all posts information
 * {@link /post}
 */
export async function getPosts(params: GetPostsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetPostsQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/post`, params, ...requestConfig })
  return res
}

export function getPostsQueryOptions(params: GetPostsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getPostsQueryKey(params)
  return queryOptions<ResponseConfig<GetPostsQueryResponse>, ResponseErrorConfig<Error>, ResponseConfig<GetPostsQueryResponse>, typeof queryKey>({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getPosts(params, config)
    },
  })
}

/**
 * @summary Get all posts information
 * {@link /post}
 */
export function useGetPosts<
  TData = ResponseConfig<GetPostsQueryResponse>,
  TQueryData = ResponseConfig<GetPostsQueryResponse>,
  TQueryKey extends QueryKey = GetPostsQueryKey,
>(
  params: GetPostsQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<GetPostsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getPostsQueryKey(params)

  const query = useQuery(
    {
      ...(getPostsQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}