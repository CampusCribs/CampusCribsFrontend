/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/lib/client'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/lib/client'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { SearchPostsQueryResponse, SearchPostsQueryParams } from '../../types/SearchPosts.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const searchPostsInfiniteQueryKey = (params: SearchPostsQueryParams) => [{ url: '/search' }, ...(params ? [params] : [])] as const

export type SearchPostsInfiniteQueryKey = ReturnType<typeof searchPostsInfiniteQueryKey>

/**
 * @summary Search for posts and users
 * {@link /search}
 */
export async function searchPostsInfinite(params: SearchPostsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<SearchPostsQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/search`, params, ...requestConfig })
  return res
}

export function searchPostsInfiniteQueryOptions(params: SearchPostsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = searchPostsInfiniteQueryKey(params)
  return infiniteQueryOptions<
    ResponseConfig<SearchPostsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<SearchPostsQueryResponse>,
    typeof queryKey,
    number
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['next_page'] = pageParam as unknown as SearchPostsQueryParams['next_page']
      }
      return searchPostsInfinite(params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * @summary Search for posts and users
 * {@link /search}
 */
export function useSearchPostsInfinite<
  TData = InfiniteData<ResponseConfig<SearchPostsQueryResponse>>,
  TQueryData = ResponseConfig<SearchPostsQueryResponse>,
  TQueryKey extends QueryKey = SearchPostsInfiniteQueryKey,
>(
  params: SearchPostsQueryParams,
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<SearchPostsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? searchPostsInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...(searchPostsInfiniteQueryOptions(params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}