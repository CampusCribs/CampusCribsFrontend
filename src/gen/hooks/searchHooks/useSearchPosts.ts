/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/lib/client'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/lib/client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { SearchPostsQueryResponse, SearchPostsQueryParams } from '../../types/SearchPosts.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const searchPostsQueryKey = (params: SearchPostsQueryParams) => [{ url: '/search' }, ...(params ? [params] : [])] as const

export type SearchPostsQueryKey = ReturnType<typeof searchPostsQueryKey>

/**
 * @summary Search for posts and users
 * {@link /search}
 */
export async function searchPosts(params: SearchPostsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<SearchPostsQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/search`, params, ...requestConfig })
  return res
}

export function searchPostsQueryOptions(params: SearchPostsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = searchPostsQueryKey(params)
  return queryOptions<ResponseConfig<SearchPostsQueryResponse>, ResponseErrorConfig<Error>, ResponseConfig<SearchPostsQueryResponse>, typeof queryKey>({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return searchPosts(params, config)
    },
  })
}

/**
 * @summary Search for posts and users
 * {@link /search}
 */
export function useSearchPosts<
  TData = ResponseConfig<SearchPostsQueryResponse>,
  TQueryData = ResponseConfig<SearchPostsQueryResponse>,
  TQueryKey extends QueryKey = SearchPostsQueryKey,
>(
  params: SearchPostsQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<SearchPostsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? searchPostsQueryKey(params)

  const query = useQuery(
    {
      ...(searchPostsQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}